#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.27o
#  in conjunction with Tcl version 8.6
#    Jan 21, 2020 12:02:16 PM CST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import ScraperGUI1_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    ScraperGUI1_support.set_Tk_var()
    top = Scraper (root)
    ScraperGUI1_support.init(root, top)
    global outside
    outside = False
    root.mainloop()

w = None
def create_Scraper(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt  # rt, root
    rt = root
    w = tk.Toplevel (root)
    ScraperGUI1_support.set_Tk_var()
    top = Scraper (w)
    global outside
    outside = True
    ScraperGUI1_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Scraper():
    global w
    w.destroy()
    w = None

class Scraper:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {DejaVu Sans Mono} -size 9"
        font9 = "-family {DejaVu Sans} -size 9"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1211x822+372+122")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1, 1)
        top.title("Greg's Recipe Website Scraper Test")
        top.configure(highlightcolor="black")

        self.btnExit = tk.Button(top)
        self.btnExit.place(relx=0.865, rely=0.038, height=31, width=87)
        self.btnExit.configure(activebackground="#f9f9f9")
        self.btnExit.configure(command=ScraperGUI1_support.on_btnExit)
        self.btnExit.configure(font="-family {Ubuntu} -size 11 -weight bold -slant italic")
        self.btnExit.configure(text='''Exit''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.038, rely=0.088, height=20, width=124)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='e')
        self.Label1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label1.configure(text='''Website:''')

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.154, rely=0.082,height=31, relwidth=0.492)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="-family {DejaVu Sans Mono} -size 8")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(textvariable=ScraperGUI1_support.EntryWebsite)

        self.lblTitle = tk.Label(top)
        self.lblTitle.place(relx=0.154, rely=0.139, height=31, width=612)
        self.lblTitle.configure(activebackground="#f9f9f9")
        self.lblTitle.configure(borderwidth="2")
        self.lblTitle.configure(font="-family {DejaVu Sans} -size 10 -weight bold -slant italic")
        self.lblTitle.configure(relief="ridge")
        self.lblTitle.configure(text='''Label''')
        self.lblTitle.configure(textvariable=ScraperGUI1_support.sRecipeTitle)

        self.lblTotalTime = tk.Label(top)
        self.lblTotalTime.place(relx=0.154, rely=0.189, height=31, width=275)
        self.lblTotalTime.configure(activebackground="#f9f9f9")
        self.lblTotalTime.configure(borderwidth="2")
        self.lblTotalTime.configure(relief="ridge")
        self.lblTotalTime.configure(text='''Label''')
        self.lblTotalTime.configure(textvariable=ScraperGUI1_support.sTotalTime)

        self.lblYields = tk.Label(top)
        self.lblYields.place(relx=0.154, rely=0.238, height=31, width=275)
        self.lblYields.configure(activebackground="#f9f9f9")
        self.lblYields.configure(borderwidth="2")
        self.lblYields.configure(relief="ridge")
        self.lblYields.configure(text='''Label''')
        self.lblYields.configure(textvariable=ScraperGUI1_support.sYields)

        self.Scrolledlistbox1 = ScrolledListBox(top)
        self.Scrolledlistbox1.place(relx=0.273, rely=0.584, relheight=0.369
                , relwidth=0.277)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(font=font10)
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.562, rely=0.584, relheight=0.372
                , relwidth=0.41)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font=font9)
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(wrap="word")

        self.lblImageURL = tk.Label(top)
        self.lblImageURL.place(relx=0.154, rely=0.29, height=73, width=578)
        self.lblImageURL.configure(activebackground="#f9f9f9")
        self.lblImageURL.configure(borderwidth="2")
        self.lblImageURL.configure(relief="ridge")
        self.lblImageURL.configure(text='''Label''')
        self.lblImageURL.configure(textvariable=ScraperGUI1_support.sImageURL)
        self.lblImageURL.configure(wraplength="450")

        self.btnGo = tk.Button(top)
        self.btnGo.place(relx=0.652, rely=0.082, height=31, width=81)
        self.btnGo.configure(activebackground="#f9f9f9")
        self.btnGo.configure(command=ScraperGUI1_support.on_btnGo)
        self.btnGo.configure(font="-family {Ubuntu} -size 10 -weight bold")
        self.btnGo.configure(text='''Scrape''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.029, rely=0.145, height=21, width=143)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor='e')
        self.Label2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label2.configure(text='''Title:''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.031, rely=0.195, height=21, width=138)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor='e')
        self.Label3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label3.configure(text='''Total Time:''')

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.05, rely=0.246, height=21, width=111)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(anchor='e')
        self.Label4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label4.configure(text='''Yields:''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.038, rely=0.297, height=20, width=130)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(anchor='e')
        self.Label5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label5.configure(text='''Image URL:''')

        self.lblImage = tk.Label(top)
        self.lblImage.place(relx=0.672, rely=0.139, height=300, width=300)
        self.lblImage.configure(activebackground="#f9f9f9")
        self.lblImage.configure(borderwidth="2")
        self.lblImage.configure(relief="ridge")
        self.lblImage.configure(text='''Label''')

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.281, rely=0.556, height=19, width=125)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(anchor='w')
        self.Label7.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label7.configure(text='''Ingredients:''')

        self.Label8 = tk.Label(top)
        self.Label8.place(relx=0.57, rely=0.556, height=22, width=149)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(anchor='w')
        self.Label8.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label8.configure(text='''Instructions:''')

        self.btnSaveToDB = tk.Button(top)
        self.btnSaveToDB.place(relx=0.471, rely=0.219, height=29, width=159)
        self.btnSaveToDB.configure(activebackground="#f9f9f9")
        self.btnSaveToDB.configure(command=ScraperGUI1_support.on_btnSaveToDB)
        self.btnSaveToDB.configure(font="-family {Ubuntu} -size 11 -weight bold -slant italic")
        self.btnSaveToDB.configure(text='''Save To Database''')

        self.Label8_1 = tk.Label(top)
        self.Label8_1.place(relx=0.025, rely=0.556, height=23, width=149)
        self.Label8_1.configure(activebackground="#f9f9f9")
        self.Label8_1.configure(anchor='w')
        self.Label8_1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label8_1.configure(text='''Categories:''')

        self.frameCustomWidget = tk.Frame(top)
        self.frameCustomWidget.place(relx=0.017, rely=0.584, relheight=0.371
                , relwidth=0.244)
        self.frameCustomWidget.configure(relief='sunken')
        self.frameCustomWidget.configure(borderwidth="3")
        self.frameCustomWidget.configure(relief="sunken")

        self.Custom1 = ScraperGUI1_support.Custom(self.frameCustomWidget)
        self.Custom1.place(relx=0.01, rely=0.01, relheight=0.977, relwidth=0.976)

        self.Message1 = tk.Message(top)
        self.Message1.place(relx=0.017, rely=0.414, relheight=0.137
                , relwidth=0.244)
        self.Message1.configure(borderwidth="2")
        self.Message1.configure(relief="ridge")
        self.Message1.configure(text='''Message''')
        self.Message1.configure(textvariable=ScraperGUI1_support.msgCategories)
        self.Message1.configure(width=295)

    @staticmethod
    def popup1(event, *args, **kwargs):
        global outside
        if not(outside):
            Popupmenu1 = tk.Menu(root, tearoff=0)
        else:
            Popupmenu1 = tk.Menu(rt, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=ScraperGUI1_support.on_popPaste,
                font=('-family {DejaVu Sans} -size 9'),
                foreground="#000000",
                label="Paste")
        Popupmenu1.add_separator(
                background="#d9d9d9")
        Popupmenu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=ScraperGUI1_support.on_popCopy,
                font=('-family {DejaVu Sans} -size 9'),
                foreground="#000000",
                label="Copy")
        Popupmenu1.add_separator(
                background="#d9d9d9")
        Popupmenu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                command=ScraperGUI1_support.on_popClear,
                font=('-family {DejaVu Sans} -size 9'),
                foreground="#000000",
                label="Clear")
        Popupmenu1.post(event.x_root, event.y_root)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





