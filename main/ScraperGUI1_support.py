#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.27o
#  in conjunction with Tcl version 8.6
#    Jan 16, 2020 09:00:01 AM CST  platform: Linux
#    Jan 19, 2020 03:25:29 PM CST  platform: Linux
#    Jan 20, 2020 05:06:04 AM CST  platform: Linux
#    Jan 20, 2020 09:52:23 AM CST  platform: Linux
# ======================================================
# Written by G.D. Walters
# ------------------------------------------------------
# Last modification date: 20 January, 2020
# ======================================================
import sys
from recipe_scrapers import scrape_me
from PIL import Image, ImageTk
import os
import platform
import requests
import shutil
import shared
import sqlite3
from dbutils import quote
from ScrolledCheckedListBox import ScrolledCheckedListBox
import cbv3Main
import cbv3Main_support

try:
    import Tkinter as tk
    import tkFileDialog as filedialog
    import tkMessageBox as messagebox
    import tkFont as font
    import tksimpledialog as simpledialog
except ImportError:
    import tkinter as tk
    from tkinter import messagebox
    from tkinter import font
    from tkinter import filedialog
    from tkinter import simpledialog

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def on_btnSaveToDB():
    if shared.debug:
        print('ScraperGUI1_support.on_btnSaveToDB')
    sys.stdout.flush()
    # Check to see if there are any categories set
    lst = w.Custom1.get()
    print(len(lst))
    if len(lst):
        WriteToDb()
    else:
        title = 'No Categories'
        txt = 'There are no categories selected.  Do you still want to save to database?'
        resp = messagebox.askyesno(title,txt)
        if resp:
            WriteToDb()

def set_Tk_var():
    global msgCategories
    msgCategories = tk.StringVar()
    msgCategories.set('Message')

    global EntryWebsite
    EntryWebsite = tk.StringVar()
    global sRecipeTitle
    sRecipeTitle = tk.StringVar()
    sRecipeTitle.set('Label')
    global sTotalTime
    sTotalTime = tk.StringVar()
    sTotalTime.set('Label')
    global sYields
    sYields = tk.StringVar()
    sYields.set('Label')
    global sImageURL
    sImageURL = tk.StringVar()
    sImageURL.set('Label')

def on_btnExit():
    if shared.debug:
        print('ScraperGUI1_support.on_btnExit')
        sys.stdout.flush()
    isok = check_attr(shared, 'remote')
    if isok:
        cbv3Main_support.show_me()
        hide_me()
    else:
        destroy_window()


def get_image_from_web(url):
    # Attempt to get image from url and place it in w.lblImage
    global _img2
    pic_url = url
    if shared.debug:
        print(f'Attempting to get {url}')
    try:
        with open('pic1.jpg', 'wb') as handle:
            response = requests.get(pic_url, stream=True)

            if not response.ok:
                print(response)

            for block in response.iter_content(1024):
                if not block:
                    break

                handle.write(block)

        jpgfile = Image.open('pic1.jpg')
        jpgfile.save('local_image.png')
        os.remove(jpfile)
        original = Image.open('local_image.png')
        wid, hei = original.size
        if shared.debug:
            print(f'Width: {wid} - Height: {hei}')
        if wid >= hei:
            ratio = 300.0/wid
            if shared.debug:
                print(ratio)
            w2 = wid * ratio
            h2 = hei * ratio
        else:
            ratio = 300./hei
            if shared.debug:
                print(ratio)
            w2 = wid * ratio
            h2 = hei * ratio
        if shared.debug:
            print(f'New Width = {int(w2)} - New Height = {int(h2)}')
        _img1 = original.resize((int(w2), int(h2)), Image.ANTIALIAS)
        _img2 = ImageTk.PhotoImage(_img1)
        w.lblImage.configure(image=_img2)
        src = 'local_image.png'
        d1 = shared.title.replace(" ", "")
        dst = './database/recipeimages/' + d1 + ".png"
        shared.imgname = dst
        print(f'Attemptying to copy {src} to {dst}')
        shutil.copyfile(src, dst)
        os.remove(original)
        # os.rename(src, dst)
    except Exception:
        boxTitle = "Image Error"
        boxMessage = "An error occured getting the image."
        messagebox.showerror(boxTitle, boxMessage)
        print("An error occured getting the image")
        _img2 = None
        w.lblImage.configure(image=_img2)

def on_btnGo():
    busyStart()
    print('ScraperGUI1_support.on_btnGo')
    url_to_get = EntryWebsite.get()
    clear_form()
    if shared.debug:
        print(f'Attempting to contact {EntryWebsite.get()}')
    sys.stdout.flush()
    # try:
    scraper = scrape_me(url_to_get)
    shared.title = scraper.title()
    shared.total_time = scraper.total_time()
    shared.yields = scraper.yields()

    shared.ingredients = scraper.ingredients()
    shared.instructions = scraper.instructions()
    shared.image = scraper.image()
    # links = scraper.links()
    if shared.debug:
        print(shared.title)
        print(shared.total_time)
        print(shared.yields)
        print(shared.ingredients)
        print(shared.instructions)
        print(shared.image)
    # get_image_from_web(image)
    # ======================================================
    # Fill in the GUI widgets
    # ======================================================
    fill_form()
    # except Exception:
    #     print('oh-oh')
    busyEnd()

def on_popPaste():
    # if shared.debug:
    #     print('PopPaste')
    print('PopPaste')
    EntryWebsite.set('')
    clear_form()
    EntryWebsite.set(root.clipboard_get())  # type='UTF8_String'))
    on_btnGo()

def on_popClear(e=None):
    if shared.debug:
        print('PopClear')
    EntryWebsite.set('')

def on_popCopy():
    if shared.debug:
        print('PopCopy')
    # get field value from event, but remove line return at end
    field_value = EntryWebsite.get()  # "1.0", 'end-1c')
    root.clipboard_clear()  # clear clipboard contents
    root.clipboard_append(field_value)

def on_entryKeyPress(e):
    if shared.debug:
        print('EntryKeyPress')
    if e.keysym == 'Return':
        on_btnGo()

def on_customClick(s=None):
    if shared.debug:
        print('on_customClick')
    update_label()
    # keep a list for updating database

def fill_form():
    if shared.debug:
        print('Into fill_form')
    sRecipeTitle.set(shared.title)
    sTotalTime.set(f'{shared.total_time} minutes')
    sYields.set(shared.yields)
    sImageURL.set(shared.image)
    get_image_from_web(shared.image)

    # ingredients
    load_ingredients()
    # instructions
    load_instructions()

def clear_form():
    w.Scrolledtext1.delete('1.0', tk.END)
    w.Scrolledlistbox1.delete(0, tk.END)
    w.Custom1.clear()
    msgCategories.set('')
    sRecipeTitle.set('')
    sTotalTime.set('')
    sYields.set('')
    sImageURL.set('')

def load_ingredients():
    for line in shared.ingredients:
        w.Scrolledlistbox1.insert('end', line)

def load_instructions():
    w.Scrolledtext1.insert('end', shared.instructions)

def testdb():
    global cursor
    global connection

    sql = 'SELECT * from recipes'
    recs = list(cursor.execute(sql))
    if len(recs):
        print(len(recs))

def WriteToDb():
    global connection, cursor

    # print('NewRecipe = {0}'.format(NewRecipe))
    # resp = AskQuestion(
    #                    'Save Changes',
    #                    'About to save data. Are you sure you wish to continue?')
    # print(resp)
    # if resp is True:

    busyStart()
    try:
        cur = cursor
        NewRecipe = True
        if NewRecipe is True:
            # -----------------------
            # Write Title,Source and Servings - Retain Record Number
            # -----------------------
            sql = ("Insert into recipes "
                "(RecipeText,RecipeSource,RecipeServes,TotalTime, Active) "
                "VALUES ({0},{1},{2},{3},{4});").format(
                quote(sRecipeTitle.get()),
                quote(EntryWebsite.get()),
                quote(sYields.get()),
                quote(sTotalTime.get()),
                1)
            # print(sql)
            # Everything depends on the last_insert_rowid being available
            # so if this fails, we have to abort and have the user try again
            cur.execute(sql)
            connection.commit()
            if shared.debug:
                print('Main Record Written')
            # LastRecord is the last id that was saved in the recipe table
            # We will use it to link the rest of the data to this recipe
            LastRecord = cur.lastrowid
            if shared.debug:
                print(f'LastRecord inserted at {LastRecord}')
            # -----------------------
            # Write Instructions
            # -----------------------
            sql = ("Insert into instructions "
                "(RecipeID,InstructionsData) "
                "VALUES ({0},{1})").format(LastRecord,
                                            quote(
                                                w.Scrolledtext1.get(
                                                    1.0, tk.END)))
            # print(sql)
            # r = input('Press a key ->')
            cur.execute(sql)
            connection.commit()
            if shared.debug:
                print('Instructions written')
            # -----------------------
            # Write ImageURL
            # STILL TO DO
            sql = ('INSERT INTO images (recipeID, image) '
                'VALUES ({0}, {1})'.format(
                    LastRecord, quote(shared.imgname)))
            # print(sql)
            cur.execute(sql)
            connection.commit()
            if shared.debug:
                print('Image Written')

            # -----------------------
            # Write Ingredients
            # -----------------------
            # ilist = GetIngredientItems(w.Scrolledlistbox1, 'I', 3)
            # print(ilist)
            # r = raw_input('Press a key -> ')
            for line in shared.ingredients:
                sql = ("INSERT INTO ingredients "
                    "(RecipeID,Ingredientitem) "
                    "VALUES ({0},{1})").format(
                    LastRecord, quote(line))

                cur.execute(sql)
            connection.commit()
            if shared.debug:
                print('Ingredients Written')
            # -----------------------
            # Write Categories
            # Get checked cateegories
            checks = w.Custom1.get()
            print(checks)
            for c in checks:
                sql = (
                    "INSERT INTO recipecategories (RecipeId, MainCatKey) VALUES ({1}, {0})".format(c[1], LastRecord))
                print(sql)
                cur.execute(sql)
            connection.commit()
            # -----------------------
            # connection.commit()
            messagebox.showinfo('Data Actions', 'Recipe Saved')
            busyEnd()
    except:
        busyEnd()
        messagebox.showerror('Error', 'Something went wrong when trying to write to database!')


# ======================================================
# function check_attr()
# ------------------------------------------------------
# When using a shared.py empty module for inter-module
# communications, if the program tries to access a variable that
# hasn't bee defined, it will crash the program with an error.
# This attemps to make it safe.
# ======================================================
def check_attr(module, variable):
    attr = getattr(module, variable, False)
    if attr is False:
        return False
    else:
        return True


def start_up():
    global connection
    global cursor

    connection = sqlite3.Connection("./database/cookbook-original.db")
    cursor = connection.cursor()
    # Setup binding for entry widget
    w.Entry1.bind('<Button-3>', lambda e: w.popup1(e, 1))
    w.Entry1.bind('<KeyRelease>', lambda e: on_entryKeyPress(e))
    # set up for cursors
    global busyCursor, preBusyCursors, busyWidgets
    busyCursor = 'watch'
    preBusyCursors = None
    busyWidgets = (root, )
    # Centre the screen
    centre_screen(1211, 822)
    # Clear the text from the image label
    w.lblImage.configure(text='')
    # Set up the debug flag
    shared.debug = False
    # Fill the entry widget for testing purposes
    initialize_custom_widget()
    EntryWebsite.set('Right click here to paste a website URL from the clipboard')
    #     'https://www.allrecipes.com/recipe/9616/grandma-ms-raisin-cookies/')
    #     'https://www.allrecipes.com/recipe/219936/spicy-chicken-thai-soup/')

    shared.debug = False
    if shared.debug:
        print('calling testdb')
    testdb()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    # ======================================================
    # My init code starts...
    # ======================================================
    global version
    version = '0.2.4'
    pv = platform.python_version()
    print(f"Running under Python {pv}")
    # Set the path for the icon files
    global path1
    path1 = os.getcwd()
    print(path1)
    print(f"Version: {version}")
    start_up()

def clear_label():
    msgCategories.set('')

def set_labels():
    pass

def update_label():
    dat = w.Custom1.get()
    lst = []
    for x in dat:
        if len(x) == 2:
            t = x[0]
            # k = x[1]
            lst.append(t)
        else:
            lst.append(x)
    s = ", ".join(lst)
    msgCategories.set(s)

def get_Custom_Cats():
    global connection, cursor
    sql = 'SELECT CatText, idCategoriesMain FROM categoriesmain order by CatText ASC'
    recs = list(cursor.execute(sql))
    if shared.debug:
        print(recs)
    return recs
    # if len(recs) > 0:
    #     for r in recs:

def initialize_custom_widget():
    w.Custom1.cback = on_customClick
    # To use a single list of item names comment out the next line and
    # uncomment the second line down.
    ListInfo2 = get_Custom_Cats()
    w.Custom1.load(ListInfo2)
    w.Custom1.clear()
    # w.Custom1.load(ListInfo)
    clear_label()
    set_labels()
# =================================================================
# cursor stuff
# =================================================================

def busyStart(newcursor=None):
    global preBusyCursors

    if not newcursor:
        newcursor = busyCursor
    newPreBusyCursors = {}
    for component in busyWidgets:
        newPreBusyCursors[component] = component['cursor']
        component.configure(cursor=newcursor)
        component.update_idletasks()
    preBusyCursors = (newPreBusyCursors, preBusyCursors)

def busyEnd():
    global preBusyCursors
    if not preBusyCursors:
        return
    oldPreBusyCursors = preBusyCursors[0]
    preBusyCursors = preBusyCursors[1]
    for component in busyWidgets:
        try:
            component.configure(cursor=oldPreBusyCursors[component])
        except KeyError:
            pass
        component.update_idletasks()

def centre_screen(wid, hei):
    ws = root.winfo_screenwidth()
    hs = root.winfo_screenheight()
    x = (ws/2) - (wid/2)
    y = (hs/2) - (hei/2)
    root.geometry('%dx%d+%d+%d' % (wid, hei, x, y))

# =================================================================
# Window stuff
# =================================================================
def show_me():
    root.deiconify()
    root.attributes("-topmost", True)
    # reload treeview here

def hide_me():
    cbv3Main_support.show_me()
    root.withdraw()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

# Custom = tk.Frame  # To be updated by user with name of custom widget.
Custom = ScrolledCheckedListBox

if __name__ == '__main__':
    import ScraperGUI1
    ScraperGUI1.vp_start_gui()




