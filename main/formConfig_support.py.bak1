#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.2
#  in conjunction with Tcl version 8.6
#    Feb 28, 2020 04:58:15 AM CST  platform: Linux
#    Feb 28, 2020 08:46:14 AM CST  platform: Linux

import sys
import cbv3Main
import cbv3Main_support
import os
from os import path
import platform
import datetime
import sqlite3
import shared
from PIL import ImageTk, Image
from dbutils import quote
import configparser

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def set_Tk_var():
    global defImagePath
    defImagePath = tk.StringVar()


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    # ======================================================
    # My init code starts...
    # ======================================================
    global version, path1, progname
    version = '0.1.1'
    global progname
    progname = "Cookbook V3 Configuration"
    startup()


def startup():
    global version, path1, progname
    pv = platform.python_version()
    print(f"Running under Python {pv}")
    # Set the path for the icon files
    path1 = os.getcwd()
    print(path1)

    print(f'Progam Name: {progname}')
    print(f"Version: {version}")
    centre_screen(758, 544)
    set_images()
    set_icon()
    read_config()


def centre_screen(wid, hei):
    ws = root.winfo_screenwidth()
    hs = root.winfo_screenheight()
    x = (ws/2) - (wid/2)
    y = (hs/2) - (hei/2)
    root.geometry('%dx%d+%d+%d' % (wid, hei, x, y))


def on_btnExit():
    print('formConfig_support.on_btnExit')
    sys.stdout.flush()
    destroy_window()


def on_btnFilePath():
    print('formConfig_support.on_btnFilePath')
    sys.stdout.flush()


def read_config():
    config = configparser.ConfigParser()
    if path.exists('config.ini'):
        config.read('config.ini')
        csections = config.sections()
        print(csections)
        if 'DEFAULT' in config:
            shared.defaultImagePath = config['DEFAULT']['defaultimagepath']
        if 'Themes' in config:
            shared.defaultTheme = config['Themes']['defaulttheme']
        # fill_form()
    else:
        defaultConfigWrite('config.ini')
        config.read('config.ini')
        shared.defaultImagePath = config['DEFAULT']['defaultimagepath']
        shared.defaultTheme = config['Themes']['defaulttheme']
    fill_form()


def fill_form():
    defImagePath.set(shared.defaultImagePath)
    # defaultTheme


def write_config(inifile):
    config = configparser.ConfigParser()
    config['DEFAULT']['defaultimagepath'] = shared.defaultImagePath
    themes = config['Themes']
    themes['defaulttheme'] = shared.defaultTheme
    with open(inifile, 'w') as configfile:
        config.write(configfile)


def defaultConfigWrite(inifile):
    config = configparser.ConfigParser()
    config['DEFAULT'] = {'defaultImagePath': '~/Desktop'}
    # config['Themes'] = {}
    config['Themes'] = {'defaultTheme': 'Dark2'}

    with open(inifile, 'w') as configfile:
        config.write(configfile)

# =================================================================
# Window stuff
# =================================================================


def show_me():
    root.deiconify()
    # root.attributes("-topmost", True)


def hide_me():
    cbv3Main_support.show_me()
    root.withdraw()


def set_images():
    shared.exitbtn = ImageTk.PhotoImage(file=path1 + '/images/32/app-exit.png')
    w.btnExit.configure(image=shared.exitbtn)


def set_icon():
    # ======================================================
    # Sets the application icon...
    # ======================================================
    # shared.p1 = ImageTk.PhotoImage(file=path1 + '/images/32/utilities.png')
    shared.p1 = ImageTk.PhotoImage(file=path1 + '/images/32/system-run.png')
    root.tk.call('wm', 'iconphoto', root._w, shared.p1)


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import formConfig
    formConfig.vp_start_gui()
