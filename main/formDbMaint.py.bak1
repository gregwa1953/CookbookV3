#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5a
#  in conjunction with Tcl version 8.6
#    Jan 25, 2020 04:09:19 AM CST  platform: Linux

import platform
import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import formDbMaint_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    formDbMaint_support.set_Tk_var()
    top = formDbMaint(root)
    formDbMaint_support.init(root, top)
    root.mainloop()


w = None


def create_formDbMaint(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    formDbMaint_support.set_Tk_var()
    top = formDbMaint(w)
    formDbMaint_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_formDbMaint():
    global w
    w.destroy()
    w = None


class formDbMaint:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font12 = "-family {DejaVu Sans} -size 11 -weight bold"
        font13 = "-family {DejaVu Sans} -size 11 -weight bold -slant "  \
            "italic"
        font14 = "-family {DejaVu Sans} -size 14 -weight bold"
        font15 = "-family {DejaVu Sans} -size 10 -weight bold"
        font9 = "-family {DejaVu Sans} -size 9"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[
                       ('selected', _compcolor), ('active', _ana2color)])

        top.geometry("677x689+585+201")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#919191")

        self.btnMigrate = tk.Button(top)
        self.btnMigrate.place(relx=0.118, rely=0.232, height=39, width=309)
        self.btnMigrate.configure(font=font12)
        self.btnMigrate.configure(text='''Migrate Old Database to New''')

        self.btnExit = tk.Button(top)
        self.btnExit.place(relx=0.783, rely=0.044, height=39, width=109)
        self.btnExit.configure(command=formDbMaint_support.on_btnExit)
        self.btnExit.configure(font=font13)
        self.btnExit.configure(text='''Exit''')

        self.btnDupes = tk.Button(top)
        self.btnDupes.place(relx=0.118, rely=0.319, height=39, width=309)
        self.btnDupes.configure(activebackground="#f9f9f9")
        self.btnDupes.configure(command=formDbMaint_support.on_btnDupes)
        self.btnDupes.configure(
            font="-family {DejaVu Sans} -size 11 -weight bold")
        self.btnDupes.configure(text='''Check for Duplicates''')

        self.btnOrphans = tk.Button(top)
        self.btnOrphans.place(relx=0.118, rely=0.406, height=39, width=309)
        self.btnOrphans.configure(activebackground="#f9f9f9")
        self.btnOrphans.configure(command=formDbMaint_support.on_btnOrphans)
        self.btnOrphans.configure(
            font="-family {DejaVu Sans} -size 11 -weight bold")
        self.btnOrphans.configure(text='''Check for Orphans''')

        self.lblRecipeCount = tk.Label(top)
        self.lblRecipeCount.place(relx=0.089, rely=0.058, height=79, width=386)
        self.lblRecipeCount.configure(background="#919191")
        self.lblRecipeCount.configure(borderwidth="2")
        self.lblRecipeCount.configure(font=font14)
        self.lblRecipeCount.configure(relief="ridge")
        self.lblRecipeCount.configure(text='''# of Recipes: 9999''')
        self.lblRecipeCount.configure(
            textvariable=formDbMaint_support.RecipeCount)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.34, rely=0.61, height=20, width=187)
        self.Label1.configure(anchor='w')
        self.Label1.configure(font=font15)
        self.Label1.configure(text='''Label''')
        self.Label1.configure(textvariable=formDbMaint_support.WorkingRecord)

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.089, rely=0.61, height=20, width=155)
        self.Label2.configure(anchor='e')
        self.Label2.configure(background="#919191")
        self.Label2.configure(font=font15)
        self.Label2.configure(text='''Working Record:''')

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.103, rely=0.552, relwidth=0.753)
        self.TSeparator1.configure(takefocus="0")

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(
            relx=0.044, rely=0.668, relheight=0.312, relwidth=0.889)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font=font9)
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(takefocus="0")
        self.Scrolledtext1.configure(wrap="none")

# The following code is added to facilitate the Scrolled widgets you specified.


class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind(
            '<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>',
                       lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
